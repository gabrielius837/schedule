// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schedule.Persistence;

#nullable disable

namespace Schedule.Persistence.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    [Migration("20221005064339_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Schedule.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.Property<int>("MarketId")
                        .HasColumnType("int")
                        .HasColumnName("MarketId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Number");

                    b.HasKey("Id")
                        .HasName("PK_Company");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("MarketId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Company_Name");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("UQ_Company_Number");

                    b.ToTable("Company", (string)null);

                    b.HasCheckConstraint("CK_Company", "Number LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' AND CompanyTypeId > 1");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aad7a630-af1c-4952-9cb4-44b8b847853b"),
                            CompanyTypeId = 2,
                            MarketId = 1,
                            Name = "scheduled company",
                            Number = "0123456789"
                        },
                        new
                        {
                            Id = new Guid("54142eda-2b7c-43bb-83f4-5dc79dba5988"),
                            CompanyTypeId = 4,
                            MarketId = 3,
                            Name = "unscheduled company",
                            Number = "1231231234"
                        },
                        new
                        {
                            Id = new Guid("ffe5ffdd-9a9e-4be4-88ac-b90614b04ce8"),
                            CompanyTypeId = 3,
                            MarketId = 2,
                            Name = "*all* company",
                            Number = "4564564567"
                        });
                });

            modelBuilder.Entity("Schedule.Domain.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_CompanyType");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_CompanyType_Name");

                    b.ToTable("CompanyType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "all"
                        },
                        new
                        {
                            Id = 2,
                            Name = "small"
                        },
                        new
                        {
                            Id = 3,
                            Name = "medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "large"
                        });
                });

            modelBuilder.Entity("Schedule.Domain.Config", b =>
                {
                    b.Property<int>("CronMaskId")
                        .HasColumnType("int")
                        .HasColumnName("CronMaskId");

                    b.Property<int>("MarketId")
                        .HasColumnType("int")
                        .HasColumnName("MarketId");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.HasKey("CronMaskId", "MarketId", "CompanyTypeId")
                        .HasName("PK_Config");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("MarketId");

                    b.ToTable("Config", (string)null);

                    b.HasData(
                        new
                        {
                            CronMaskId = 1,
                            MarketId = 1,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 2,
                            MarketId = 1,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 4,
                            MarketId = 1,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 6,
                            MarketId = 1,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 7,
                            MarketId = 1,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 1,
                            MarketId = 2,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 2,
                            MarketId = 2,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 4,
                            MarketId = 2,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 7,
                            MarketId = 2,
                            CompanyTypeId = 1
                        },
                        new
                        {
                            CronMaskId = 1,
                            MarketId = 3,
                            CompanyTypeId = 2
                        },
                        new
                        {
                            CronMaskId = 3,
                            MarketId = 3,
                            CompanyTypeId = 2
                        },
                        new
                        {
                            CronMaskId = 5,
                            MarketId = 3,
                            CompanyTypeId = 2
                        },
                        new
                        {
                            CronMaskId = 8,
                            MarketId = 3,
                            CompanyTypeId = 2
                        },
                        new
                        {
                            CronMaskId = 1,
                            MarketId = 3,
                            CompanyTypeId = 3
                        },
                        new
                        {
                            CronMaskId = 3,
                            MarketId = 3,
                            CompanyTypeId = 3
                        },
                        new
                        {
                            CronMaskId = 5,
                            MarketId = 3,
                            CompanyTypeId = 3
                        },
                        new
                        {
                            CronMaskId = 8,
                            MarketId = 3,
                            CompanyTypeId = 3
                        },
                        new
                        {
                            CronMaskId = 1,
                            MarketId = 4,
                            CompanyTypeId = 4
                        },
                        new
                        {
                            CronMaskId = 2,
                            MarketId = 4,
                            CompanyTypeId = 4
                        },
                        new
                        {
                            CronMaskId = 4,
                            MarketId = 4,
                            CompanyTypeId = 4
                        },
                        new
                        {
                            CronMaskId = 6,
                            MarketId = 4,
                            CompanyTypeId = 4
                        },
                        new
                        {
                            CronMaskId = 7,
                            MarketId = 4,
                            CompanyTypeId = 4
                        });
                });

            modelBuilder.Entity("Schedule.Domain.CronMask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Mask");

                    b.HasKey("Id")
                        .HasName("PK_CronMask");

                    b.HasIndex("Mask")
                        .IsUnique()
                        .HasDatabaseName("UQ_CronMask_Mask");

                    b.ToTable("CronMask", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mask = "0 0 1 * *"
                        },
                        new
                        {
                            Id = 2,
                            Mask = "0 0 5 * *"
                        },
                        new
                        {
                            Id = 3,
                            Mask = "0 0 7 * *"
                        },
                        new
                        {
                            Id = 4,
                            Mask = "0 0 10 * *"
                        },
                        new
                        {
                            Id = 5,
                            Mask = "0 0 14 * *"
                        },
                        new
                        {
                            Id = 6,
                            Mask = "0 0 15 * *"
                        },
                        new
                        {
                            Id = 7,
                            Mask = "0 0 20 * *"
                        },
                        new
                        {
                            Id = 8,
                            Mask = "0 0 28 * *"
                        });
                });

            modelBuilder.Entity("Schedule.Domain.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Market");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Market_Name");

                    b.ToTable("Market", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Finland"
                        });
                });

            modelBuilder.Entity("Schedule.Domain.Notification", b =>
                {
                    b.Property<int>("MarketId")
                        .HasColumnType("int")
                        .HasColumnName("MarketId");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int")
                        .HasColumnName("Timestamp");

                    b.HasKey("MarketId", "CompanyTypeId", "Timestamp")
                        .HasName("PK_Notification");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Schedule.Domain.Company", b =>
                {
                    b.HasOne("Schedule.Domain.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanyType");

                    b.HasOne("Schedule.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Company_Market");

                    b.Navigation("CompanyType");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Schedule.Domain.Config", b =>
                {
                    b.HasOne("Schedule.Domain.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Config_CompanyType");

                    b.HasOne("Schedule.Domain.CronMask", "CronMask")
                        .WithMany()
                        .HasForeignKey("CronMaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Config_CronMask");

                    b.HasOne("Schedule.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Config_Market");

                    b.Navigation("CompanyType");

                    b.Navigation("CronMask");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Schedule.Domain.Notification", b =>
                {
                    b.HasOne("Schedule.Domain.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_CompanyType");

                    b.HasOne("Schedule.Domain.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Market");

                    b.Navigation("CompanyType");

                    b.Navigation("Market");
                });
#pragma warning restore 612, 618
        }
    }
}
